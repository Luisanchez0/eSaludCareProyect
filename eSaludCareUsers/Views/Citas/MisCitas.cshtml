@{
    ViewBag.Title = "Mis Citas";
}

<main class="main">
    <section id="hero" class="hero section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-12 bg-light p-4 rounded shadow-sm">
                    <h3 class="department-name mb-3 text-center text-primary fw-bold">
                        Mis Citas Médicas
                    </h3>

                    <!-- Contenedor de alertas -->
                    <div id="alert-container" class="mb-3"></div>

                    <!-- Tabla de citas -->
                    <div class="table-responsive">
                        <table class="table table-striped text-center align-middle" id="citas-table">
                            <thead class="table-dark">
                                <tr>
                                    <th>Fecha</th>
                                    <th>Hora</th>
                                    <th>Doctor</th>
                                    <th>Estado</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Se llenará dinámicamente -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Mensaje si no hay citas -->
                    <div id="no-citas" class="text-center text-muted mt-3" style="display: none;">
                        No tienes citas registradas.
                    </div>

                    <!-- Indicador de carga -->
                    <div id="loading" class="text-center text-secondary mt-3" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-2">Cargando tus citas...</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            // 🔹 Obtener token y usuario del localStorage
            const token = localStorage.getItem("token");
            const idUsuario = localStorage.getItem("idUsuario");

            if (!token || !idUsuario) {
                window.location.href = "/Login/Index";
                return;
            }

            const tbody = document.querySelector("#citas-table tbody");
            const mensajeNoCitas = document.getElementById("no-citas");
            const loading = document.getElementById("loading");
            const alertContainer = document.getElementById("alert-container");

            // 🔹 Mostrar alerta Bootstrap
            function mostrarAlerta(tipo, mensaje) {
                alertContainer.innerHTML = `
                        <div class="alert alert-${tipo} alert-dismissible fade show" role="alert">
                            ${mensaje}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>`;
            }

            // 🔹 Obtener ID del paciente (si lo necesitas en otras funciones)
            async function obtenerIdPaciente(idUsuario) {
                try {
                    const response = await fetch(`/api/v1/obtenerIdPaciente?idUsuario=${idUsuario}`, {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    const data = await response.json();
                    if (data.idPaciente) {
                        document.getElementById("idPaciente").value = data.idPaciente;
                    } else {
                        mostrarAlerta("warning", "No se encontró el paciente asociado al usuario.");
                    }
                } catch {
                    mostrarAlerta("danger", "Error al obtener datos del paciente.");
                }
            }

            // 🔹 Cargar citas del usuario
            async function cargarCitas() {
                try {
                    loading.style.display = "block";
                    mensajeNoCitas.style.display = "none";
                    tbody.innerHTML = "";

                    const res = await fetch(`/api/v1/misCitas?idUsuario=${idUsuario}`, {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });

                    if (!res.ok) throw new Error("Error al obtener citas");
                    const citas = await res.json();

                    if (citas.length === 0) {
                        mensajeNoCitas.style.display = "block";
                        return;
                    }

                    citas.forEach(cita => {
                        const tr = document.createElement("tr");

                        // Colores según estado
                        let colorEstado = "secondary";
                        const estado = cita.Estado.toLowerCase();
                        if (estado === "pendiente") colorEstado = "warning";
                        if (estado === "confirmada") colorEstado = "success";
                        if (estado === "cancelada") colorEstado = "danger";

                        // Botones de acción
                        let acciones = "";
                        if (estado === "pendiente") {
                            acciones = `
                                    <button class="btn btn-outline-success btn-sm me-1" data-id="${cita.IdCita}" data-action="confirmar">
                                        Confirmar
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" data-id="${cita.IdCita}" data-action="cancelar">
                                        Cancelar
                                    </button>`;
                        }

                        tr.innerHTML = `
                                <td>${new Date(cita.Fecha).toLocaleDateString("es-ES", { day: '2-digit', month: '2-digit', year: 'numeric' })}</td>
                                <td>${cita.Hora}</td>
                                <td>${cita.Doctor}</td>
                                <td><span class="badge bg-${colorEstado} text-uppercase">${cita.Estado}</span></td>
                                <td>${acciones}</td>
                            `;

                        tbody.appendChild(tr);
                    });
                } catch (error) {
                    console.error("Error al cargar citas:", error);
                    mostrarAlerta("danger", `No se pudieron cargar tus citas. ${error.message}`);
                } finally {
                    loading.style.display = "none";
                }
            }

            // 🔹 Inicializar carga
            await cargarCitas();

            // 🔹 Confirmar o cancelar cita
            tbody.addEventListener("click", async function (e) {
                if (e.target.tagName === "BUTTON") {
                    const btn = e.target;
                    const citaId = btn.dataset.id;
                    const action = btn.dataset.action;

                    if (action === "cancelar" && !confirm("¿Estás seguro de cancelar esta cita?")) return;

                    const endpoint = action === "confirmar"
                        ? `/api/v1/confirmarCita/${citaId}`
                        : `/api/v1/cancelarCita/${citaId}`;

                    try {
                        btn.disabled = true;

                        const res = await fetch(endpoint, {
                            method: "PUT",
                            headers: { 'Authorization': `Bearer ${token}` }
                        });

                        if (!res.ok) throw new Error("No se pudo actualizar la cita");

                        const data = await res.json();
                        mostrarAlerta("success", data.mensaje || "Cita actualizada correctamente.");
                        await cargarCitas();
                    } catch (error) {
                        console.error(error);
                        mostrarAlerta("danger", "Error al actualizar la cita.");
                    } finally {
                        btn.disabled = false;
                    }
                }
            });
        });
    </script>
}
