@{
    ViewBag.Title = "Registrar Cita Médica";
}

<style>
    /* 🎨 Estilo personalizado del formulario */
    .cita-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 85vh;
        padding: 2rem;
    }

    .form-cita {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
        padding: 2rem 2.5rem;
        max-width: 700px;
        width: 100%;
        transition: all 0.3s ease;
    }

        .form-cita:hover {
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);
        }

        .form-cita h3 {
            color: var(--accent-color);
            font-weight: 700;
            text-align: center;
            margin-bottom: 1.8rem;
            font-size: 1.5rem;
        }

    .form-label {
        font-weight: 600;
        color: #333;
        font-size: 14px;
    }

    .form-control,
    .form-select,
    textarea {
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 14px;
        padding: 10px;
        transition: border-color 0.2s ease;
    }

        .form-control:focus,
        .form-select:focus,
        textarea:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(0, 153, 255, 0.2);
            outline: none;
        }

    .btn-cita {
        color: var(--contrast-color);
        background: var(--accent-color);
        font-size: 14px;
        padding: 10px 30px;
        margin-top: 10px;
        border-radius: 4px;
        transition: 0.3s;
        border: none;
        width: 100%;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

        .btn-cita:hover {
            background: var(--contrast-color);
            color: var(--accent-color);
            border: 1px solid var(--accent-color);
        }
</style>

<main class="main">
    <!-- Page Title -->
    <div class="page-title">
        <div class="heading">
            <div class="container">
                <div class="row d-flex justify-content-center text-center">
                    <div class="col-lg-6">
                        <h1 class="heading-title">Registrar Cita Médica</h1>
                        <p class="mb-0">
                            Programa fácilmente tu cita médica y selecciona el horario que mejor se adapte a ti.
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <nav class="breadcrumbs">
            <div class="container">
                <ol>
                    <li><a href="@Url.Action("Index", "Home")">Home</a></li>
                    <li class="current">Programa Cita Médica</li>
                </ol>
            </div>
        </nav>
    </div><!-- End Page Title -->

    <section class="cita-container">
        <form id="formCita" class="form-cita" autocomplete="off">
            <input type="hidden" id="idPaciente" />

            <div class="row g-3">
                <div class="col-md-12">
                    <label for="idMedico" class="form-label"><i class="fa-solid fa-user-doctor me-2"></i>Médico</label>
                    <select id="idMedico" name="IdMedico" class="form-select" required>
                        <option value="">-- Selecciona un médico --</option>
                    </select>
                </div>

                <div class="col-md-6">
                    <label for="fecha" class="form-label"><i class="fa-solid fa-calendar-day me-2"></i>Fecha</label>
                    <input type="date" id="fecha" name="Fecha" class="form-control"
                           required min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>

                <div class="col-md-6">
                    <label for="hora" class="form-label"><i class="fa-solid fa-clock me-2"></i>Hora</label>
                    <select id="hora" name="Hora" class="form-select" required>
                        <option value="">-- Selecciona la hora --</option>
                    </select>
                </div>

                <div class="col-12">
                    <label for="motivo" class="form-label"><i class="fa-solid fa-note-sticky me-2"></i>Motivo</label>
                    <textarea id="motivo" name="Motivo" rows="3" class="form-control"
                              placeholder="Describe el motivo de tu cita..." required></textarea>
                </div>
            </div>

            <button type="submit" class="btn-cita mt-3">
                <i class="fa-solid fa-circle-check me-2"></i> Agendar Cita
            </button>
        </form>
    </section>
</main>

@section Scripts {
    <!-- Toastr (CSS y JS desde CDN) -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script>
        function parseJwt(token) {
            if (!token) return null;
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(c =>
                '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)
            ).join(''));
            return JSON.parse(jsonPayload);
        }

        document.addEventListener("DOMContentLoaded", async function () {
            const token = localStorage.getItem("token");
            if (!token) {
                toastr.warning("Debes iniciar sesión para agendar una cita.", "Atención");
                setTimeout(() => window.location.href = "/Login/Index", 3000);
                return;
            }

            const payload = parseJwt(token);
            const idUsuario = payload?.unique_name;

            toastr.options = {
                "closeButton": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "timeOut": "3500",
                "extendedTimeOut": "1000"
            };

            function mostrarMensaje(texto, tipo) {
                if (tipo === "success") {
                    toastr.success(texto, "Éxito");
                } else {
                    toastr.error(texto, "Atención");
                }
            }

            async function obtenerIdPaciente(idUsuario) {
                try {
                    const response = await fetch(`/api/v1/obtenerIdPaciente?idUsuario=${idUsuario}`, {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    const data = await response.json();
                    if (data.idPaciente) {
                        document.getElementById("idPaciente").value = data.idPaciente;
                    } else {
                        mostrarMensaje("No se encontró el paciente asociado al usuario.", "error");
                    }
                } catch {
                    mostrarMensaje("Error al obtener datos del paciente.", "error");
                }
            }
            await obtenerIdPaciente(idUsuario);

            async function cargarMedicos() {
                try {
                    const response = await fetch('@Url.Action("obtenerMedicos", "Citas")', {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    const data = await response.json();
                    const select = document.getElementById('idMedico');
                    select.innerHTML = '<option value="">-- Selecciona un médico --</option>';

                    if (data.estado) {
                        data.elemento.forEach(medico => {
                            const option = document.createElement('option');
                            option.value = medico.IdMedico;
                            option.textContent = `${medico.Nombre} ${medico.Apellido} - ${medico.Especialidad}`;
                            select.appendChild(option);
                        });
                    }
                } catch {
                    mostrarMensaje("Error al cargar médicos.", "error");
                }
            }
            await cargarMedicos();

            const selectMedico = document.getElementById('idMedico');
            const inputFecha = document.getElementById('fecha');
            const selectHora = document.getElementById('hora');

            selectHora.disabled = true;

            async function cargarHorasDisponibles() {
                const medicoId = selectMedico.value;
                const fecha = inputFecha.value;
                selectHora.innerHTML = '<option value="">-- Selecciona la hora --</option>';

                if (!medicoId || !fecha) {
                    selectHora.disabled = true;
                    return;
                }

                selectHora.disabled = true;
                const cargandoOption = document.createElement('option');
                cargandoOption.textContent = 'Cargando horarios...';
                selectHora.appendChild(cargandoOption);

                try {
                    const response = await fetch(`/api/v1/HorariosDisponibles?idMedico=${medicoId}&fecha=${fecha}`, {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    const data = await response.json();
                    selectHora.innerHTML = '<option value="">-- Selecciona la hora --</option>';

                    if (data.estado && Array.isArray(data.horarios)) {
                        let disponibles = 0;
                        data.horarios.forEach(h => {
                            const option = document.createElement('option');
                            option.value = h.hora;
                            option.textContent = h.hora;

                            if (h.ocupado) {
                                option.disabled = true;
                                option.style.color = '#999';
                                option.textContent += ' (ocupado)';
                            } else {
                                option.style.color = 'green';
                                disponibles++;
                            }

                            selectHora.appendChild(option);
                        });

                        selectHora.disabled = false;

                        if (disponibles === 0) {
                            const aviso = document.createElement('option');
                            aviso.textContent = "No hay horarios disponibles";
                            aviso.disabled = true;
                            selectHora.appendChild(aviso);
                        } else {
                            mostrarMensaje(`Hay ${disponibles} horario(s) disponible(s)`, "success");
                        }

                    } else {
                        const aviso = document.createElement('option');
                        aviso.textContent = "No hay horarios disponibles";
                        aviso.disabled = true;
                        selectHora.appendChild(aviso);
                        selectHora.disabled = true;
                    }

                } catch (error) {
                    console.error("Error al cargar horarios:", error);
                    mostrarMensaje("Error al cargar horarios.", "error");
                }
            }

            selectMedico.addEventListener('change', () => {
                selectHora.innerHTML = '<option value="">-- Selecciona la hora --</option>';
                selectHora.disabled = true;
                cargarHorasDisponibles();
            });

            inputFecha.addEventListener('change', () => {
                selectHora.innerHTML = '<option value="">-- Selecciona la hora --</option>';
                selectHora.disabled = true;
                cargarHorasDisponibles();
            });

            document.getElementById('formCita').addEventListener('submit', async (e) => {
                e.preventDefault();

                const cita = {
                    IdPaciente: parseInt(document.getElementById('idPaciente').value),
                    IdMedico: parseInt(selectMedico.value),
                    Fecha: inputFecha.value,
                    Hora: selectHora.value,
                    Motivo: document.getElementById('motivo').value
                };

                if (!cita.IdPaciente || !cita.IdMedico || !cita.Fecha || !cita.Hora || !cita.Motivo) {
                    mostrarMensaje("Por favor, completa todos los campos.", "error");
                    return;
                }

                try {
                    const response = await fetch('/api/v1/registrarCita', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(cita)
                    });

                    const data = await response.json();
                    if (response.ok) {
                        mostrarMensaje(data.mensaje || "Cita registrada correctamente.", "success");
                        document.getElementById('formCita').reset();
                        selectHora.innerHTML = '<option value="">-- Selecciona la hora --</option>';
                        selectHora.disabled = true;
                        selectMedico.value = '';
                    } else {
                        const mensajeError = data.Message || data.message || data.mensaje || "Error al registrar la cita.";
                        mostrarMensaje(mensajeError, "error");
                    }
                } catch (error) {
                    console.error("Error al registrar cita:", error);
                    mostrarMensaje("Error al conectar con el servidor.", "error");
                }
            });
        });
    </script>
}
